# webhook.py

from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª

import os
import logging
from datetime import datetime
from pathlib import Path

from fastapi import FastAPI, Request, HTTPException
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
import aiofiles

from db import get_session
from subscriptions import (
    mark_payment_succeeded,
    activate_or_extend_subscription,
)
from models import Payment as PaymentDB, PaymentStatus  # —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∏–ø–æ–≤/–æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–∫
from services.notification_service import (
    get_24h_notification_text,
    get_24h_notification_keyboard,
    get_24h_notification_photo_path,
    get_48h_notification_text,
    get_48h_notification_keyboard,
    get_48h_notification_photo_path
)

# ------------------ Config & logging ------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN env is required")

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("yookassa-webhook")

bot = Bot(token=BOT_TOKEN)
app = FastAPI(title="YooKassa Webhook")

# ------------------ Helpers ------------------
def fmt_dt(dt: datetime | None) -> str:
    if not dt:
        return "‚Äî"
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ UTC; –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤—å tz/–ª–æ–∫–∞–ª—å
    return dt.strftime("%Y-%m-%d %H:%M UTC")


# ------------------ Routes ------------------
@app.get("/healthz")
async def healthz():
    return {"status": "ok"}

@app.post("/yookassa/webhook")
async def yookassa_webhook(request: Request):
    """
    –û–∂–∏–¥–∞–µ—Ç JSON –æ—Ç –ÆKassa —Å —Å–æ–±—ã—Ç–∏—è–º–∏:
    - payment.succeeded (–º–∏–Ω–∏–º—É–º)
    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ÆKassa: —Å–º. –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –∏ –ø–æ–ª–µ object.metadata
    """
    try:
        data = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON")

    event = data.get("event")
    obj = data.get("object") or {}
    provider_payment_id = obj.get("id")

    # metadata, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    md = obj.get("metadata") or {}
    payment_db_id = md.get("payment_db_id")
    chat_id = md.get("chat_id")
    tariff = md.get("tariff")

    log.info(
        f"[YK] event={event} provider_payment_id={provider_payment_id} "
        f"payment_db_id={payment_db_id} chat_id={chat_id} tariff={tariff}"
    )

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
    if event != "payment.succeeded":
        return {"status": "ignored"}

    if payment_db_id is None:
        # –ë–µ–∑ –Ω–∞—à–µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ ID –Ω–µ –∑–Ω–∞–µ–º, –∫–∞–∫–æ–π –ø–ª–∞—Ç–µ–∂ –∞–ø–¥–µ–π—Ç–∏—Ç—å
        log.error("Missing metadata.payment_db_id in webhook payload")
        raise HTTPException(status_code=400, detail="Missing payment_db_id")

    async with get_session() as session:
        try:
            # 1) –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞: succeeded + paid_at + provider_payment_id + —Å—ã—Ä–æ–π payload
            payment: PaymentDB = await mark_payment_succeeded(
                session=session,
                payment_db_id=int(payment_db_id),
                provider_payment_id=provider_payment_id or "",
                payload=obj,
            )

            # 2) –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º/–ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ —Ç–∞—Ä–∏—Ñ—É –∏–∑ –ø–ª–∞—Ç–µ–∂–∞
            sub = await activate_or_extend_subscription(
                session=session,
                user_id=payment.user_id,
                tariff_code=payment.tariff_code,
            )

            await session.commit()
            log.info(
                f"Payment {payment.id} marked as succeeded; "
                f"subscription end_at={fmt_dt(sub.end_at)} user_id={payment.user_id}"
            )
        except Exception as e:
            log.exception("Failed to handle payment.succeeded")
            await session.rollback()
            raise HTTPException(status_code=500, detail="processing_error") from e

    # 3) –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (–µ—Å–ª–∏ chat_id –ø–µ—Ä–µ–¥–∞–ª–∏ –≤ metadata)
    if chat_id:
        try:
            text = """–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞—Ä–∫–µ—Ç–°–∫–∏–ª–ª—Å. –ó–∞–∫—Ä–µ–ø —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å, –∑–¥–µ—Å—å –±—É–¥—É—Ç –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–∏–µ –≤ –∫–ª—É–±–µ. –ü–æ–¥–∫–ª—é—á–∞–π—Å—èüëáüèª"""

            keyboard = [[InlineKeyboardButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", url="https://t.me/+894eFO0WhbhjZTUy")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            photo_path = Path(__file__).parent / "content" / "photo4.jpg"

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if not photo_path.exists():
                    log.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
                    raise FileNotFoundError(f"Photo file not found: {photo_path}")
                
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                async with aiofiles.open(photo_path, 'rb') as photo:
                    photo_data = await photo.read()
                    await bot.send_photo(
                        chat_id=int(chat_id),
                        photo=photo_data,
                        caption=text,
                        reply_markup=reply_markup
                    )
                log.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            except FileNotFoundError as e:
                log.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
                await bot.send_message(
                    chat_id=int(chat_id),
                    text=text,
                    reply_markup=reply_markup
                )
                log.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} (–±–µ–∑ —Ñ–æ—Ç–æ)")
            except Exception as e:
                log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
                await bot.send_message(
                    chat_id=int(chat_id),
                    text=text,
                    reply_markup=reply_markup
                )
                log.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} (fallback)")
        except Exception as e:
            log.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

    return {"status": "ok"}

@app.post("/n8n/notification")
async def n8n_notification_webhook(request: Request):
    """
    Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç N8N –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ 24—á/48—á —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    try:
        data = await request.json()
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ N8N
    user_id = data.get("user_id")
    telegram_id = data.get("telegram_id")
    notification_type = data.get("notification_type")  # "24h" –∏–ª–∏ "48h"

    log.info(
        f"[N8N] notification user_id={user_id} telegram_id={telegram_id} "
        f"notification_type={notification_type}"
    )

    if not all([user_id, telegram_id, notification_type]):
        log.error("Missing required fields in N8N notification")
        raise HTTPException(status_code=400, detail="Missing required fields")

    if notification_type not in ["24h", "48h"]:
        log.error(f"Invalid notification_type: {notification_type}")
        raise HTTPException(status_code=400, detail="Invalid notification_type")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        log.info(f"Starting to send {notification_type} notification to {telegram_id}")
        
        if notification_type == "24h":
            # 24-—á–∞—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            text = get_24h_notification_text()
            keyboard = get_24h_notification_keyboard()
            photo_path = Path(__file__).parent / "content" / "p24.jpg"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π
            log.info(f"Photo path for 24h: {photo_path}, exists: {photo_path.exists()}")
            try:
                if photo_path.exists():
                    async with aiofiles.open(photo_path, 'rb') as photo:
                        photo_data = await photo.read()
                        await bot.send_photo(
                            chat_id=int(telegram_id),
                            photo=photo_data,
                            caption=text,
                            parse_mode=ParseMode.HTML,
                            reply_markup=keyboard
                        )
                else:
                    log.warning(f"Photo not found: {photo_path}, sending text only")
                    await bot.send_message(
                        chat_id=int(telegram_id),
                        text=text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=keyboard
                    )
            except Exception as e:
                log.error(f"Error sending photo, fallback to text: {e}")
                await bot.send_message(
                    chat_id=int(telegram_id),
                    text=text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=keyboard
                )
            
            log.info(f"Sent 24h notification to user {telegram_id}")
            
        elif notification_type == "48h":
            # 48-—á–∞—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            text = get_48h_notification_text()
            keyboard = get_48h_notification_keyboard()
            photo_path = Path(__file__).parent / "content" / "p48.jpg"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π
            log.info(f"Photo path for 48h: {photo_path}, exists: {photo_path.exists()}")
            try:
                if photo_path.exists():
                    async with aiofiles.open(photo_path, 'rb') as photo:
                        photo_data = await photo.read()
                        await bot.send_photo(
                            chat_id=int(telegram_id),
                            photo=photo_data,
                            caption=text,
                            parse_mode=ParseMode.HTML,
                            reply_markup=keyboard
                        )
                else:
                    log.warning(f"Photo not found: {photo_path}, sending text only")
                    await bot.send_message(
                        chat_id=int(telegram_id),
                        text=text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=keyboard
                    )
            except Exception as e:
                log.error(f"Error sending photo, fallback to text: {e}")
                await bot.send_message(
                    chat_id=int(telegram_id),
                    text=text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=keyboard
                )
            
            log.info(f"Sent 48h notification to user {telegram_id}")
            
    except Exception as e:
        log.exception(f"Failed to send notification to user {telegram_id}: {e}")
        raise HTTPException(status_code=500, detail="telegram_send_error")

    return {"status": "ok", "notification_type": notification_type}
