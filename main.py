import os
import uuid
import logging
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram import WebAppInfo
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters, JobQueue
)

from yookassa import Configuration, Payment

# ==== –Ω–∞—à–∏ –º–æ–¥—É–ª–∏ (–æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã) ====
from db import get_session
from services.subscriptions import (
    get_or_create_user,
    create_pending_payment,
)
# –ï—Å–ª–∏ webhook –¥–µ–ª–∞–µ—à—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ, —Ç–∞–º –∂–µ –±—É–¥—É—Ç:
#   mark_payment_succeeded, activate_or_extend_subscription

# ================== –ë–ê–ó–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê ==================
load_dotenv()

logging.basicConfig(
    format='%(asctime)s | %(levelname)s | %(name)s | %(message)s',
    level=logging.INFO
)
logger = logging.getLogger("bot")

BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ÆKassa
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")
RETURN_URL = os.getenv("RETURN_URL", "https://t.me/YourBotName")

# –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã
VIDEO_PATH = "content/doc_2025-08-15_19-37-12.mp4"  # –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SDK –ÆKassa
Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY


# ================== –•–ï–ù–î–õ–ï–†–´ –ë–û–¢–ê ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"""
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with get_session() as session:
        user = await get_or_create_user(
            session,
            tg_id=update.message.from_user.id,
            username=update.message.from_user.username,
            first_name=update.message.from_user.first_name
        )
        await session.commit()

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∫—Ä—É–∂–æ—á–µ–∫
    try:
        with open(VIDEO_PATH, "rb") as f:
            await context.bot.send_video_note(
                chat_id=update.message.chat.id,
                video_note=f
            )
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        import asyncio
        await asyncio.sleep(1)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –∫—Ä—É–∂–æ—á–µ–∫: {e}")

    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    welcome_text = """–ü–æ—Å–º–æ—Ç—Ä–∏ –∫—Ä—É–∂–æ–∫ –∏ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ MarketSkills: üëáüèª"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ"
    video_keyboard = [[InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ üìπ", callback_data='watch_video')]]
    video_reply_markup = InlineKeyboardMarkup(video_keyboard)

    await update.message.reply_text(welcome_text, reply_markup=video_reply_markup)

    # –¢–∞–π–º–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–º—å—é–Ω–∏—Ç–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    # chat_id = update.message.chat.id
    # if context.job_queue:
    #     context.job_queue.run_once(send_community_message, 10, chat_id=chat_id, name=f"auto_msg_{chat_id}")


async def send_community_message(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º—å—é–Ω–∏—Ç–∏"""
    job = context.job
    chat_id = job.chat_id
    
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É)
    current_jobs = context.job_queue.get_jobs_by_name(f"auto_msg_{chat_id}")
    for job_to_cancel in current_jobs:
        if job_to_cancel != job:  # –Ω–µ –æ—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π job
            job_to_cancel.schedule_removal()
    
    community_text = """<b>–û—Ç–∫—Ä—ã–≤–∞—é —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏, –Ω–æ –∑–Ω–∞–π —á—Ç–æ...</b> 

–ó–¥–µ—Å—å, –ª—é–¥–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –æ–Ω–ª–∞–π–Ω, –ø–æ–∑–∞–±—ã–≤ –æ "—Ä–∞–±–æ—Ç—ã —Ä–∞–¥–∏ —Ä–∞–±–æ—Ç—ã" 

üì¶ –ó–¥–µ—Å—å –∑–∞—Ö–æ–¥—è—Ç –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã —Å 0
–¥–∞–∂–µ –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤ ‚Äî –∏ –≤–æ—Ç –ø–æ—á–µ–º—É:

üí• –ö–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏ ‚Äî —Ä–∞–∑–±–æ—Ä—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –∫–µ–π—Å—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ —ç—Ñ–∏—Ä—ã 

ü´Ç –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–µ–∫—Ç—É, —Å–¥–µ–ª–∫–µ, –∫–∞—Ä—Ç–æ—á–∫–µ –∏–ª–∏ –∑–∞–ø—É—Å–∫—É ‚Äî –ø–æ–¥—Å–∫–∞–∂—É—Ç, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ.

üìö –ü–æ—à–∞–≥–æ–≤—ã–µ —É—Ä–æ–∫–∏: –∫–∞–∫ —Å—Ç–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∏ –≤—Å—ë 
—ç—Ç–æ –±–µ–∑ "–∫—É—Ä—Å–æ–≤ –∑–∞ 100–∫".

ü§ù –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—Å—á–∏–∫ ‚Äî —Ç—ã —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã. –ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞—é—Ç —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã 

–ê –µ—â—ë ‚Äî —Ç—É—Ç –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —Ç—ë–ø–ª–∞—è –¥–≤–∏–∂—É—Ö–∞. –í–º–µ—Å—Ç–µ —à—É—Ç–∏–º –ø—Ä–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, —Å–∫–∏–¥—ã–≤–∞–µ–º —Ñ–∞–∫–∞–ø—ã, –æ–±—Å—É–∂–¥–∞–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ –ø–æ–º–æ–≥–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥—É –Ω–µ —Å–≥–æ—Ä–µ—Ç—å.

–ò –≤—Å—ë —ç—Ç–æ ‚Äî –∑–∞ 1490‚ÇΩ –≤ –º–µ—Å—è—Ü.
–ö–æ–≥–¥–∞, –µ—Å–ª–∏ –Ω–µ —Å–µ–π—á–∞—Å. –í—Å—Ç—É–ø–∞–π!"""

    photo_path = "content/photo3.jpg"

    try:
        with open(photo_path, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=community_text,
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫–æ–º—å—é–Ω–∏—Ç–∏: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text=community_text,
            parse_mode=ParseMode.HTML
        )

    # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º—å—é–Ω–∏—Ç–∏
    import asyncio
    await asyncio.sleep(3)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º—å—é–Ω–∏—Ç–∏
    connect_keyboard = [[InlineKeyboardButton("üí• –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è üí•", callback_data='connect_community')]]
    connect_reply_markup = InlineKeyboardMarkup(connect_keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text="üî•üî•üî• –ü–û–î–ö–õ–Æ–ß–ò–¢–¨–°–Ø –ö –ö–û–ú–¨–Æ–ù–ò–¢–ò üî•üî•üî•",
        reply_markup=connect_reply_markup
    )


async def send_community_message_direct(chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º—å—é–Ω–∏—Ç–∏ (–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏)"""
    community_text = """<b>–û—Ç–∫—Ä—ã–≤–∞—é —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏, –Ω–æ –∑–Ω–∞–π —á—Ç–æ...</b> 

–ó–¥–µ—Å—å, –ª—é–¥–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –æ–Ω–ª–∞–π–Ω, –ø–æ–∑–∞–±—ã–≤ –æ "—Ä–∞–±–æ—Ç—ã —Ä–∞–¥–∏ —Ä–∞–±–æ—Ç—ã" 

üì¶ –ó–¥–µ—Å—å –∑–∞—Ö–æ–¥—è—Ç –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã —Å 0
–¥–∞–∂–µ –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤ ‚Äî –∏ –≤–æ—Ç –ø–æ—á–µ–º—É:

üí• –ö–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏ ‚Äî —Ä–∞–∑–±–æ—Ä—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –∫–µ–π—Å—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ —ç—Ñ–∏—Ä—ã 

ü´Ç –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–µ–∫—Ç—É, —Å–¥–µ–ª–∫–µ, –∫–∞—Ä—Ç–æ—á–∫–µ –∏–ª–∏ –∑–∞–ø—É—Å–∫—É ‚Äî –ø–æ–¥—Å–∫–∞–∂—É—Ç, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ.

üìö –ü–æ—à–∞–≥–æ–≤—ã–µ —É—Ä–æ–∫–∏: –∫–∞–∫ —Å—Ç–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∏ –≤—Å—ë 
—ç—Ç–æ –±–µ–∑ "–∫—É—Ä—Å–æ–≤ –∑–∞ 100–∫".

ü§ù –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—Å—á–∏–∫ ‚Äî —Ç—ã —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã. –ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞—é—Ç —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã 

–ê –µ—â—ë ‚Äî —Ç—É—Ç –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —Ç—ë–ø–ª–∞—è –¥–≤–∏–∂—É—Ö–∞. –í–º–µ—Å—Ç–µ —à—É—Ç–∏–º –ø—Ä–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, —Å–∫–∏–¥—ã–≤–∞–µ–º —Ñ–∞–∫–∞–ø—ã, –æ–±—Å—É–∂–¥–∞–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ –ø–æ–º–æ–≥–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥—É –Ω–µ —Å–≥–æ—Ä–µ—Ç—å.

–ò –≤—Å—ë —ç—Ç–æ ‚Äî –∑–∞ 1490‚ÇΩ –≤ –º–µ—Å—è—Ü.
–ö–æ–≥–¥–∞, –µ—Å–ª–∏ –Ω–µ —Å–µ–π—á–∞—Å. –í—Å—Ç—É–ø–∞–π!"""

    photo_path = "content/photo3.jpg"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º—å—é–Ω–∏—Ç–∏
    connect_keyboard = [[InlineKeyboardButton("üí• –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è üí•", callback_data='connect_community')]]
    connect_reply_markup = InlineKeyboardMarkup(connect_keyboard)

    try:
        with open(photo_path, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=community_text,
                parse_mode=ParseMode.HTML,
                reply_markup=connect_reply_markup
            )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫–æ–º—å—é–Ω–∏—Ç–∏: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text=community_text,
            parse_mode=ParseMode.HTML,
            reply_markup=connect_reply_markup
        )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/series - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
"""
    await update.message.reply_text(help_text)


async def services_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    services_text = """–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: 

–ú—ã —Å–æ–∑–¥–∞–ª–∏ —Ü–µ–ª–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª—é–¥—è–º –æ–±—É—á–∏—Ç—å—Å—è –∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Å—Ñ–µ—Ä–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∏ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ 

–ó–∞ –ø–æ–¥–ø–∏—Å–∫—É –≤ 1490‚ÇΩ
–ß–µ–ª–æ–≤–µ–∫ –ø–æ–ª—É—á–∞–µ—Ç:

- –£—Ä–æ–∫–∏ –ø–æ —Ç–æ–º—É, –∫–∞–∫ —Å—Ç–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
- –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ö–∏—Ç–∞–µ–º
- –ö–∞–∫ –¥–µ–ª–∞—Ç—å –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É
- –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –Ω–∞ WB
- –ü–æ–º–æ—â—å –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
- –≠—Ñ–∏—Ä—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏
- –ü–æ–ª–µ–∑–Ω—ã–µ –≥–∞–π–¥—ã
- –ü–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤"""
    await update.message.reply_text(services_text)


async def send_message_series(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    messages = [
        "–°–æ–æ–±—â–µ–Ω–∏–µ 1 –∏–∑ —Å–µ—Ä–∏–∏",
        "–°–æ–æ–±—â–µ–Ω–∏–µ 2 –∏–∑ —Å–µ—Ä–∏–∏",
        "–°–æ–æ–±—â–µ–Ω–∏–µ 3 –∏–∑ —Å–µ—Ä–∏–∏",
        "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ—Ä–∏–∏!"
    ]
    for i, message in enumerate(messages, 1):
        await update.message.reply_text(f"{i}. {message}")


# --------- –ÆKassa: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ ---------
def yk_create_payment_and_get_url(chat_id: int, payment_db_id: int, tariff_code: str, amount_rub: str, description: str):
    """
    –°–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂ –≤ –ÆKassa –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (provider_payment_id, confirmation_url).
    amount_rub: —Å—Ç—Ä–æ–∫–∞ —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä '1490.00'
    """
    idempotence_key = str(uuid.uuid4())
    metadata = {
        "chat_id": chat_id,
        "tariff": tariff_code,
        "payment_db_id": payment_db_id
    }
    payment = Payment.create({
        "amount": {"value": amount_rub, "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": RETURN_URL},
        "capture": True,
        "description": description,
        "metadata": metadata,
        # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ñ. —á–µ–∫:
        "receipt": {
            "customer": {"email": "client@example.com"},
            "items": [{
                "description": description,
                "quantity": "1.00",
                "amount": {"value": amount_rub, "currency": "RUB"},
                "vat_code": 1,
                "payment_subject": "service",
                "payment_mode": "full_payment"
            }]
        }
    }, idempotence_key)
    return payment.id, payment.confirmation.confirmation_url


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data == 'all_good_continue':
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—Å–µ —Å—É–ø–µ—Ä, –¥–∞–ª—å—à–µüöÄ"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–º—å—é–Ω–∏—Ç–∏
        await send_community_message_direct(query.message.chat.id, context)

    elif query.data == 'watch_video':
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ üìπ"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        button_keyboard = [
            [InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é üëÄ", web_app=WebAppInfo(url="https://rutube.ru/video/private/749e29cb5ef61090468cf42120ad016b/?p=Q8BIQDKmwYGd2m9-lm9yKQ"))],
            [InlineKeyboardButton("–í—Å–µ —Å—É–ø–µ—Ä, –¥–∞–ª—å—à–µüöÄ", callback_data='all_good_continue')]
        ]
        button_reply_markup = InlineKeyboardMarkup(button_keyboard)

        button_photo_path = "content/3810.JPG"

        try:
            with open(button_photo_path, 'rb') as photo:
                await query.message.reply_photo(
                    photo=photo,
                    reply_markup=button_reply_markup
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=button_reply_markup)

    elif query.data == 'connect_community':
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üí•–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º—å—é–Ω–∏—Ç–∏"
        tariff_text = """–í—ã–±–∏—Ä–∞–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ! üëåüèª

–ü–æ–º–µ—Å—è—á–Ω—ã–π - 1490‚ÇΩ/–º–µ—Å. 
–°—Ç–∞–±–∏–ª—å–Ω—ã–π - 3990‚ÇΩ/ 3 –º–µ—Å. 

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ :)
@spoddershka"""
        
        photo_path = "content/photo2.jpg"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ"
        choose_tariff_keyboard = [[InlineKeyboardButton("ü§ù –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ ü§ù", callback_data='choose_tariff_step')]]
        choose_tariff_reply_markup = InlineKeyboardMarkup(choose_tariff_keyboard)

        try:
            with open(photo_path, 'rb') as photo:
                await query.message.reply_photo(
                    photo=photo,
                    caption=tariff_text,
                    reply_markup=choose_tariff_reply_markup
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏: {e}")
            await query.message.reply_text(tariff_text, reply_markup=choose_tariff_reply_markup)

    elif query.data == 'choose_tariff_step':
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "ü§ù–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ"
        oferta_url = "https://docs.yandex.ru/docs/view?url=ya-disk-public%3A%2F%2FZkx7HkIuQDpkVUiXOfvHBOO%2FQPNC9%2Fxb%2BiOzOS22ub%2FpW7TeWe4Yk3b3NEtMKypTq%2FJ6bpmRyOJonT3VoXnDag%3D%3D"
        
        oferta_text = f"""<b>–¢—ã —É–∂–µ –≤ —à–∞–≥–µ –æ—Ç –Ω–∞—Å!</b> ü•π
–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Ç–µ–±—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É: <b>"–î–∞–ª–µ–µ"</b> —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è —Å <a href="{oferta_url}">–ü—É–±–ª–∏—á–Ω–æ–π –æ—Ñ—Ñ–µ—Ä—Ç—ã</a>"""

        dalee_keyboard = [[InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data='proceed_to_payment')]]
        dalee_reply_markup = InlineKeyboardMarkup(dalee_keyboard)

        await query.message.reply_text(
            text=oferta_text,
            parse_mode=ParseMode.HTML,
            reply_markup=dalee_reply_markup,
            disable_web_page_preview=True
        )

    elif query.data == 'proceed_to_payment':
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
        payment_keyboard = [
            [InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –†–§ üá∑üá∫", callback_data='payment_rf_card')],
            [InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –Ω–µ –†–§ üåç", callback_data='payment_foreign_card')]
        ]
        payment_reply_markup = InlineKeyboardMarkup(payment_keyboard)

        await query.message.reply_text(
            text="<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b> üí≥:",
            parse_mode=ParseMode.HTML,
            reply_markup=payment_reply_markup
        )

    elif query.data == 'payment_foreign_card':
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞"
        foreign_payment_keyboard = [[InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url="https://t.me/tribute/app?startapp=ep_8xY0SyWiII0m5WAIvnXUKtqnazJqBXJjWYaks9qLwjy6iK7m80")]]
        foreign_payment_reply_markup = InlineKeyboardMarkup(foreign_payment_keyboard)

        await query.message.reply_text(
            text="–î–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=foreign_payment_reply_markup
        )

    elif query.data == 'payment_rf_card':
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –†–§" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–æ–≤
        tariff_keyboard = [
            [InlineKeyboardButton("–¢–∞—Ä–∏—Ñ –ü–æ–º–µ—Å—è—á–Ω—ã–π ‚Äî 1490‚ÇΩ/–º–µ—Å.", callback_data='tariff_monthly')],
            [InlineKeyboardButton("–¢–∞—Ä–∏—Ñ –°—Ç–∞–±–∏–ª—å–Ω—ã–π ‚Äî 3990‚ÇΩ / 3 –º–µ—Å.", callback_data='tariff_stable')],
        ]
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ üëá",
            reply_markup=InlineKeyboardMarkup(tariff_keyboard),
        )

    elif query.data == 'learn_more':
        oferta_url = (
            "https://docs.yandex.ru/docs/view?url=ya-disk-public%3A%2F%2FZkx7HkIuQDpkVUiXOfvHBOO%2FQPNC9%2Fxb%2BiOzOS22ub%2FpW7TeWe4Yk3b3NEtMKypTq%2FJ6bpmRyOJonT3VoXnDag%3D%3D"
            "&name=%D0%9E%D1%84%D1%84%D0%B5%D1%80%D1%82%D0%B0%20MarketSkills%20(2).docx&nosw=1"
        )

        keyboard = [
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ñ–µ—Ä—Ç—É üìÑ", url=oferta_url)],
            [InlineKeyboardButton("–î–ê–õ–ï–ï", callback_data='next_step')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        oferta_text = (
            '–ù–∞–∂–∏–º–∞—è "–î–∞–ª–µ–µ" –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø—É–±–ª–∏—á–Ω–æ–π '
            f'<a href="{oferta_url}">–û–§–§–ï–†–¢–´</a> üìÑ'
            '\n–∏–Ω–Ω: 051701385730 –ò–ü –ì–∞–∑–∏–µ–≤ –®–∞–º–∏–ª—å –ì–∞–∑–∏–µ–≤–∏—á'
        )

        await query.message.reply_text(
            text=oferta_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )

    elif query.data == 'next_step':
        keyboard = [[InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ üöÄ", callback_data='choose_tariff')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        tariff_text = """–í—ã–±–∏—Ä–∞–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ! üëåüèª

–ü–æ–º–µ—Å—è—á–Ω—ã–π - 1490‚ÇΩ/–º–µ—Å. 
–°—Ç–∞–±–∏–ª—å–Ω—ã–π - 3990‚ÇΩ/ 3 –º–µ—Å. 

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ :)
@spoddershka"""
        photo_path = "content/photo2.jpg"

        try:
            with open(photo_path, 'rb') as photo:
                await query.message.reply_photo(
                    photo=photo,
                    caption=tariff_text,
                    reply_markup=reply_markup
                )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}")
            await query.message.reply_text(tariff_text, reply_markup=reply_markup)

    # ---------- –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –¢–ê–†–ò–§–û–í ----------
    elif query.data == 'choose_tariff':
        tariff_keyboard = [
            [InlineKeyboardButton("–¢–∞—Ä–∏—Ñ –ü–æ–º–µ—Å—è—á–Ω—ã–π ‚Äî 1490‚ÇΩ/–º–µ—Å.", callback_data='tariff_monthly')],
            [InlineKeyboardButton("–¢–∞—Ä–∏—Ñ –°—Ç–∞–±–∏–ª—å–Ω—ã–π ‚Äî 3990‚ÇΩ / 3 –º–µ—Å.", callback_data='tariff_stable')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='next_step')],
        ]
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ üëá",
            reply_markup=InlineKeyboardMarkup(tariff_keyboard),
        )

    elif query.data in ('tariff_monthly', 'tariff_stable'):
        tariff_code = 'monthly' if query.data == 'tariff_monthly' else 'stable'

        # 1) —Ñ–∏–∫—Å–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –≤ –ë–î (pending)
        async with get_session() as session:
            user = await get_or_create_user(
                session,
                tg_id=query.from_user.id,
                username=query.from_user.username,
                first_name=query.from_user.first_name
            )
            payment = await create_pending_payment(session, user.id, tariff_code=tariff_code)
            await session.commit()  # —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å payment.id

        # 2) —Å–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ –≤ –ÆKassa –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º provider_payment_id
        try:
            amount_str = f"{float(payment.amount_rub):.2f}"
            description = (
                "–ü–æ–¥–ø–∏—Å–∫–∞ MARKETSKILLS ‚Äî –ü–æ–º–µ—Å—è—á–Ω—ã–π (1 –º–µ—Å.)"
                if tariff_code == "monthly"
                else "–ü–æ–¥–ø–∏—Å–∫–∞ MARKETSKILLS ‚Äî –°—Ç–∞–±–∏–ª—å–Ω—ã–π (3 –º–µ—Å.)"
            )
            provider_payment_id, url = yk_create_payment_and_get_url(
                chat_id=query.from_user.id,
                payment_db_id=payment.id,
                tariff_code=tariff_code,
                amount_rub=amount_str,
                description=description,
            )
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º provider_payment_id
            async with get_session() as session:
                # –ª—ë–≥–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Äî –∑–∞–Ω–æ–≤–æ –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å –æ–±—ä–µ–∫—Ç –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ,
                # –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –º–æ–∂–Ω–æ —Ç–∞–∫:
                from sqlalchemy import select
                from models import Payment as PaymentModel
                p = await session.get(PaymentModel, payment.id)
                if p:
                    p.provider_payment_id = provider_payment_id
                    await session.commit()

            title = "*–¢–∞—Ä–∏—Ñ –ü–æ–º–µ—Å—è—á–Ω—ã–π* ‚Äî 1490‚ÇΩ/–º–µ—Å." if tariff_code == "monthly" \
                else "*–¢–∞—Ä–∏—Ñ –°—Ç–∞–±–∏–ª—å–Ω—ã–π* ‚Äî 3990‚ÇΩ / 3 –º–µ—Å."
            await query.message.reply_text(
                f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ {title}\n"
                f"–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Ññ{payment.id} —Å–æ–∑–¥–∞–Ω–∞.\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –≤ –ÆKassa", url=url)]])
            )
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa")
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    # ------------------------------------------------------------


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–±–µ–∑ –≤–µ–±—Ö—É–∫–æ–≤ –ÆKassa ‚Äî –æ–Ω–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ)"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Job Queue
    job_queue = JobQueue()
    application = Application.builder().token(BOT_TOKEN).job_queue(job_queue).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("service", services_command))
    application.add_handler(CommandHandler("series", send_message_series))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
