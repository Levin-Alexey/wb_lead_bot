import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"""
    keyboard = [[InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data='learn_more')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = """–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ 
–í MARKETSKILLS ü•≥

–¢—ã —É–∂–µ –≤ —à–∞–≥–µ –æ—Ç –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ. –ñ–º–∏ –Ω–∏–∂–µ üöÄ"""
    
    photo_path = "content/photo1.jpg"
    
    with open(photo_path, 'rb') as photo:
        await update.message.reply_photo(
            photo=photo,
            caption=welcome_text,
            reply_markup=reply_markup
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–º–æ—â—å –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help"""
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/series - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
"""
    await update.message.reply_text(help_text)

async def services_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /services"""
    services_text = """–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: 

–ú—ã —Å–æ–∑–¥–∞–ª–∏ —Ü–µ–ª–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª—é–¥—è–º –æ–±—É—á–∏—Ç—å—Å—è –∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Å—Ñ–µ—Ä–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∏ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ 

–ó–∞ –ø–æ–¥–ø–∏—Å–∫—É –≤ 1490‚ÇΩ
–ß–µ–ª–æ–≤–µ–∫ –ø–æ–ª—É—á–∞–µ—Ç:

- –£—Ä–æ–∫–∏ –ø–æ —Ç–æ–º—É, –∫–∞–∫ —Å—Ç–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
- –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ö–∏—Ç–∞–µ–º
- –ö–∞–∫ –¥–µ–ª–∞—Ç—å –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É
- –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –Ω–∞ WB
- –ü–æ–º–æ—â—å –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
- –≠—Ñ–∏—Ä—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏
- –ü–æ–ª–µ–∑–Ω—ã–µ –≥–∞–π–¥—ã
- –ü–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤"""
    
    await update.message.reply_text(services_text)

async def send_message_series(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
    messages = [
        "–°–æ–æ–±—â–µ–Ω–∏–µ 1 –∏–∑ —Å–µ—Ä–∏–∏",
        "–°–æ–æ–±—â–µ–Ω–∏–µ 2 –∏–∑ —Å–µ—Ä–∏–∏", 
        "–°–æ–æ–±—â–µ–Ω–∏–µ 3 –∏–∑ —Å–µ—Ä–∏–∏",
        "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ—Ä–∏–∏!"
    ]
    
    for i, message in enumerate(messages, 1):
        await update.message.reply_text(f"{i}. {message}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'learn_more':
        keyboard = [[InlineKeyboardButton("–î–ê–õ–ï–ï", callback_data='next_step')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        oferta_text = """–ù–∞–∂–∏–º–∞—è "–î–∞–ª–µ–µ" –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø—É–±–ª–∏—á–Ω–æ–π [–û–§–§–ï–†–¢–´](https://telegra.ph/Dogovor-vozmezdnogo-okazaniya-uslug--Oferta-07-26) üìÑ"""
        
        await query.message.reply_text(
            text=oferta_text,
            reply_markup=reply_markup,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    
    elif query.data == 'next_step':
        keyboard = [[InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ üöÄ", callback_data='choose_tariff')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        tariff_text = """–í—ã–±–∏—Ä–∞–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ! üëåüèª

–ü–æ–º–µ—Å—è—á–Ω—ã–π - 1490‚ÇΩ/–º–µ—Å. 
–°—Ç–∞–±–∏–ª—å–Ω—ã–π - 3990‚ÇΩ/ 3 –º–µ—Å. 

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ :)
@spoddershka"""
        
        photo_path = "content/photo2.jpg"
        
        with open(photo_path, 'rb') as photo:
            await query.message.reply_photo(
                photo=photo,
                caption=tariff_text,
                reply_markup=reply_markup
            )

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–≠—Ö–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("service", services_command))
    application.add_handler(CommandHandler("series", send_message_series))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()