import os
import uuid
import logging
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

from yookassa import Configuration, Payment

# ==== –Ω–∞—à–∏ –º–æ–¥—É–ª–∏ (–æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã) ====
from db import get_session
from services.subscriptions import (
    get_or_create_user,
    create_pending_payment,
)
# –ï—Å–ª–∏ webhook –¥–µ–ª–∞–µ—à—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ, —Ç–∞–º –∂–µ –±—É–¥—É—Ç:
#   mark_payment_succeeded, activate_or_extend_subscription

# ================== –ë–ê–ó–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê ==================
load_dotenv()

logging.basicConfig(
    format='%(asctime)s | %(levelname)s | %(name)s | %(message)s',
    level=logging.INFO
)
logger = logging.getLogger("bot")

BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ÆKassa
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")
RETURN_URL = os.getenv("RETURN_URL", "https://t.me/YourBotName")

# –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã
VIDEO_FILE_ID_1 = 'BAACAgIAAxkBAAPTaJ9jbaycfNg3dN8WSL3NwpxvsGcAAtp4AAKoBwABSbBDm2NB29gxNgQ'

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SDK –ÆKassa
Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY


# ================== –•–ï–ù–î–õ–ï–†–´ –ë–û–¢–ê ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"""
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with get_session() as session:
        user = await get_or_create_user(
            session,
            tg_id=update.message.from_user.id,
            username=update.message.from_user.username,
            first_name=update.message.from_user.first_name
        )
        await session.commit()

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∫—Ä—É–∂–æ—á–µ–∫
    try:
        await context.bot.send_video_note(
            chat_id=update.message.chat.id,
            video_note=VIDEO_FILE_ID_1
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        import asyncio
        await asyncio.sleep(1)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –∫—Ä—É–∂–æ—á–µ–∫: {e}")

    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    welcome_text = """–ü–æ—Å–º–æ—Ç—Ä–∏ –∫—Ä—É–∂–æ–∫ –∏ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ MarketSkills: üëáüèª"""

    photo_path = "content/photo1.jpg"

    try:
        with open(photo_path, 'rb') as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=welcome_text
            )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(welcome_text)

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–Ω–æ–ø–æ–∫
    await asyncio.sleep(1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
    button_keyboard = [
        [InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é üëÄ", callback_data='watch_instruction')],
        [InlineKeyboardButton("–í—Å–µ —Å—É–ø–µ—Ä, –¥–∞–ª—å—à–µüöÄ", callback_data='all_good_continue')]
    ]
    button_reply_markup = InlineKeyboardMarkup(button_keyboard)

    button_text = """–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ 
–í MARKETSKILLS ü•≥

–¢—ã —É–∂–µ –≤ —à–∞–≥–µ –æ—Ç –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ. –ñ–º–∏ –Ω–∏–∂–µ üöÄ"""

    button_photo_path = "content/3810.PNG"

    try:
        with open(button_photo_path, 'rb') as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=button_text,
                reply_markup=button_reply_markup
            )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
        await update.message.reply_text(button_text, reply_markup=button_reply_markup)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/series - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
"""
    await update.message.reply_text(help_text)


async def services_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    services_text = """–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: 

–ú—ã —Å–æ–∑–¥–∞–ª–∏ —Ü–µ–ª–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª—é–¥—è–º –æ–±—É—á–∏—Ç—å—Å—è –∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Å—Ñ–µ—Ä–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∏ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ 

–ó–∞ –ø–æ–¥–ø–∏—Å–∫—É –≤ 1490‚ÇΩ
–ß–µ–ª–æ–≤–µ–∫ –ø–æ–ª—É—á–∞–µ—Ç:

- –£—Ä–æ–∫–∏ –ø–æ —Ç–æ–º—É, –∫–∞–∫ —Å—Ç–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
- –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ö–∏—Ç–∞–µ–º
- –ö–∞–∫ –¥–µ–ª–∞—Ç—å –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É
- –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –Ω–∞ WB
- –ü–æ–º–æ—â—å –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
- –≠—Ñ–∏—Ä—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏
- –ü–æ–ª–µ–∑–Ω—ã–µ –≥–∞–π–¥—ã
- –ü–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤"""
    await update.message.reply_text(services_text)


async def send_message_series(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    messages = [
        "–°–æ–æ–±—â–µ–Ω–∏–µ 1 –∏–∑ —Å–µ—Ä–∏–∏",
        "–°–æ–æ–±—â–µ–Ω–∏–µ 2 –∏–∑ —Å–µ—Ä–∏–∏",
        "–°–æ–æ–±—â–µ–Ω–∏–µ 3 –∏–∑ —Å–µ—Ä–∏–∏",
        "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ—Ä–∏–∏!"
    ]
    for i, message in enumerate(messages, 1):
        await update.message.reply_text(f"{i}. {message}")


# --------- –ÆKassa: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ ---------
def yk_create_payment_and_get_url(chat_id: int, payment_db_id: int, tariff_code: str, amount_rub: str, description: str):
    """
    –°–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂ –≤ –ÆKassa –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (provider_payment_id, confirmation_url).
    amount_rub: —Å—Ç—Ä–æ–∫–∞ —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä '1490.00'
    """
    idempotence_key = str(uuid.uuid4())
    metadata = {
        "chat_id": chat_id,
        "tariff": tariff_code,
        "payment_db_id": payment_db_id
    }
    payment = Payment.create({
        "amount": {"value": amount_rub, "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": RETURN_URL},
        "capture": True,
        "description": description,
        "metadata": metadata,
        # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ñ. —á–µ–∫:
        "receipt": {
            "customer": {"email": "client@example.com"},
            "items": [{
                "description": description,
                "quantity": "1.00",
                "amount": {"value": amount_rub, "currency": "RUB"},
                "vat_code": 1,
                "payment_subject": "service",
                "payment_mode": "full_payment"
            }]
        }
    }, idempotence_key)
    return payment.id, payment.confirmation.confirmation_url


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data == 'learn_more':
        oferta_url = (
            "https://docs.yandex.ru/docs/view?url=ya-disk-public%3A%2F%2FZkx7HkIuQDpkVUiXOfvHBOO%2FQPNC9%2Fxb%2BiOzOS22ub%2FpW7TeWe4Yk3b3NEtMKypTq%2FJ6bpmRyOJonT3VoXnDag%3D%3D"
            "&name=%D0%9E%D1%84%D1%84%D0%B5%D1%80%D1%82%D0%B0%20MarketSkills%20(2).docx&nosw=1"
        )

        keyboard = [
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ñ–µ—Ä—Ç—É üìÑ", url=oferta_url)],
            [InlineKeyboardButton("–î–ê–õ–ï–ï", callback_data='next_step')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        oferta_text = (
            '–ù–∞–∂–∏–º–∞—è "–î–∞–ª–µ–µ" –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø—É–±–ª–∏—á–Ω–æ–π '
            f'<a href="{oferta_url}">–û–§–§–ï–†–¢–´</a> üìÑ'
            '\n–∏–Ω–Ω: 051701385730 –ò–ü –ì–∞–∑–∏–µ–≤ –®–∞–º–∏–ª—å –ì–∞–∑–∏–µ–≤–∏—á'
        )

        await query.message.reply_text(
            text=oferta_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )

    elif query.data == 'next_step':
        keyboard = [[InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ üöÄ", callback_data='choose_tariff')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        tariff_text = """–í—ã–±–∏—Ä–∞–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ! üëåüèª

–ü–æ–º–µ—Å—è—á–Ω—ã–π - 1490‚ÇΩ/–º–µ—Å. 
–°—Ç–∞–±–∏–ª—å–Ω—ã–π - 3990‚ÇΩ/ 3 –º–µ—Å. 

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ :)
@spoddershka"""
        photo_path = "content/photo2.jpg"

        try:
            with open(photo_path, 'rb') as photo:
                await query.message.reply_photo(
                    photo=photo,
                    caption=tariff_text,
                    reply_markup=reply_markup
                )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}")
            await query.message.reply_text(tariff_text, reply_markup=reply_markup)

    # ---------- –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –¢–ê–†–ò–§–û–í ----------
    elif query.data == 'choose_tariff':
        tariff_keyboard = [
            [InlineKeyboardButton("–¢–∞—Ä–∏—Ñ –ü–æ–º–µ—Å—è—á–Ω—ã–π ‚Äî 1490‚ÇΩ/–º–µ—Å.", callback_data='tariff_monthly')],
            [InlineKeyboardButton("–¢–∞—Ä–∏—Ñ –°—Ç–∞–±–∏–ª—å–Ω—ã–π ‚Äî 3990‚ÇΩ / 3 –º–µ—Å.", callback_data='tariff_stable')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='next_step')],
        ]
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ üëá",
            reply_markup=InlineKeyboardMarkup(tariff_keyboard),
        )

    elif query.data in ('tariff_monthly', 'tariff_stable'):
        tariff_code = 'monthly' if query.data == 'tariff_monthly' else 'stable'

        # 1) —Ñ–∏–∫—Å–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –≤ –ë–î (pending)
        async with get_session() as session:
            user = await get_or_create_user(
                session,
                tg_id=query.from_user.id,
                username=query.from_user.username,
                first_name=query.from_user.first_name
            )
            payment = await create_pending_payment(session, user.id, tariff_code=tariff_code)
            await session.commit()  # —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å payment.id

        # 2) —Å–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ –≤ –ÆKassa –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º provider_payment_id
        try:
            amount_str = f"{float(payment.amount_rub):.2f}"
            description = (
                "–ü–æ–¥–ø–∏—Å–∫–∞ MARKETSKILLS ‚Äî –ü–æ–º–µ—Å—è—á–Ω—ã–π (1 –º–µ—Å.)"
                if tariff_code == "monthly"
                else "–ü–æ–¥–ø–∏—Å–∫–∞ MARKETSKILLS ‚Äî –°—Ç–∞–±–∏–ª—å–Ω—ã–π (3 –º–µ—Å.)"
            )
            provider_payment_id, url = yk_create_payment_and_get_url(
                chat_id=query.from_user.id,
                payment_db_id=payment.id,
                tariff_code=tariff_code,
                amount_rub=amount_str,
                description=description,
            )
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º provider_payment_id
            async with get_session() as session:
                # –ª—ë–≥–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Äî –∑–∞–Ω–æ–≤–æ –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å –æ–±—ä–µ–∫—Ç –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ,
                # –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –º–æ–∂–Ω–æ —Ç–∞–∫:
                from sqlalchemy import select
                from models import Payment as PaymentModel
                p = await session.get(PaymentModel, payment.id)
                if p:
                    p.provider_payment_id = provider_payment_id
                    await session.commit()

            title = "*–¢–∞—Ä–∏—Ñ –ü–æ–º–µ—Å—è—á–Ω—ã–π* ‚Äî 1490‚ÇΩ/–º–µ—Å." if tariff_code == "monthly" \
                else "*–¢–∞—Ä–∏—Ñ –°—Ç–∞–±–∏–ª—å–Ω—ã–π* ‚Äî 3990‚ÇΩ / 3 –º–µ—Å."
            await query.message.reply_text(
                f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ {title}\n"
                f"–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Ññ{payment.id} —Å–æ–∑–¥–∞–Ω–∞.\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –≤ –ÆKassa", url=url)]])
            )
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa")
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    # ------------------------------------------------------------


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–±–µ–∑ –≤–µ–±—Ö—É–∫–æ–≤ –ÆKassa ‚Äî –æ–Ω–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ)"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("service", services_command))
    application.add_handler(CommandHandler("series", send_message_series))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
