#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
–û–±–Ω–æ–≤–ª—è–µ—Ç end_at –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ:
- monthly: +1 –º–µ—Å—è—Ü –æ—Ç start_at
- stable: +3 –º–µ—Å—è—Ü–∞ –æ—Ç start_at

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL
2. –ó–∞–ø—É—Å—Ç–∏—Ç—å: python fix_subscriptions.py
"""

import asyncio
import os
from datetime import datetime
from dateutil.relativedelta import relativedelta
from sqlalchemy import select, update

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DATABASE_URL –î–û –∏–º–ø–æ—Ä—Ç–∞ db
os.environ["DATABASE_URL"] = "postgresql+asyncpg://safa:SafaWSXqa12!@31.129.100.230:5432/main_db"

from db import get_session
from models import Subscription, Payment
from services.subscriptions import activate_or_extend_subscription

async def fix_subscriptions():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥—ã –ø–æ–¥–ø–∏—Å–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞—Ä–∏—Ñ—É"""
    
    print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    async with get_session() as session:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –ø–ª–∞—Ç–µ–∂–∏
        print("=== –í–°–ï –ü–õ–ê–¢–ï–ñ–ò ===")
        try:
            result = await session.execute(
                select(Payment.id, Payment.user_id, Payment.tariff_code, 
                       Payment.amount_rub, Payment.paid_at, Payment.status)
                .order_by(Payment.created_at.desc())
            )
            all_payments = result.all()
            
            print(f"–í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π –≤ –ë–î: {len(all_payments)}")
            for p in all_payments:
                print(f"ID: {p.id}, User: {p.user_id}, Tariff: {p.tariff_code}")
                print(f"  Amount: {p.amount_rub} —Ä—É–±., Status: {p.status}")
                print(f"  Paid: {p.paid_at}")
                print()
                
            # –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ
            succeeded_payments = [p for p in all_payments if str(p.status) == 'succeeded']
            print(f"\n=== –£–°–ü–ï–®–ù–´–ï –ü–õ–ê–¢–ï–ñ–ò ({len(succeeded_payments)}) ===")
            payments = succeeded_payments
            
            if not payments:
                print("‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π!")
                return
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return
        
        print("=" * 50)
        # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ–º —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            result = await session.execute(
                select(Subscription)
                .order_by(Subscription.created_at.desc())
            )
            subscriptions = result.scalars().all()
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {len(subscriptions)}")
            
            if not subscriptions:
                print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
            monthly_subs = []
            stable_subs = []
            other_subs = []
            
            for sub in subscriptions:
                if sub.tariff_code == "monthly":
                    monthly_subs.append(sub)
                elif sub.tariff_code == "stable":
                    stable_subs.append(sub)
                else:
                    other_subs.append(sub)
            
            print(f"üìà Monthly –ø–æ–¥–ø–∏—Å–æ–∫: {len(monthly_subs)}")
            print(f"üìà Stable –ø–æ–¥–ø–∏—Å–æ–∫: {len(stable_subs)}")
            print(f"üìà –î—Ä—É–≥–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(other_subs)}")
            
            print("\n=== –¢–ï–ö–£–©–ò–ï –ü–û–î–ü–ò–°–ö–ò ===")
            for sub in subscriptions:
                print(f"ID: {sub.id}, User: {sub.user_id}, Tariff: {sub.tariff_code}")
                print(f"  Start: {sub.start_at}")
                print(f"  End: {sub.end_at}")
                print(f"  Status: {sub.status}")
                print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
            print("\n=== –ê–ù–ê–õ–ò–ó –ü–õ–ê–¢–ï–ñ–ï–ô –ë–ï–ó –ü–û–î–ü–ò–°–û–ö ===")
            payments_without_subs = []
            for payment in payments:
                # –ò—â–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∞—Ä–∏—Ñ–∞
                has_subscription = any(
                    sub.user_id == payment.user_id and sub.tariff_code == payment.tariff_code 
                    for sub in subscriptions
                )
                if not has_subscription:
                    payments_without_subs.append(payment)
                    print(f"‚ö†Ô∏è  –ü–ª–∞—Ç–µ–∂ ID {payment.id} (User: {payment.user_id}, Tariff: {payment.tariff_code}) - –ù–ï–¢ –ü–û–î–ü–ò–°–ö–ò!")
            
            if payments_without_subs:
                print(f"\nüö® –ù–∞–π–¥–µ–Ω–æ {len(payments_without_subs)} –ø–ª–∞—Ç–µ–∂–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫!")
                create_response = input("üîÑ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π? (y/N): ").strip().lower()
                if create_response == 'y':
                    await create_missing_subscriptions(session, payments_without_subs)
            
            if not subscriptions:
                print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –ø–ª–∞—Ç–µ–∂–∏ –µ—Å—Ç—å - —Å–æ–∑–¥–∞–¥–∏–º –∏—Ö")
                return
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤
            response = input("üîÑ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫? (y/N): ").strip().lower()
            if response != 'y':
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
            
            updated_count = 0
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º monthly –ø–æ–¥–ø–∏—Å–∫–∏ (+1 –º–µ—Å—è—Ü)
            for sub in monthly_subs:
                correct_end = sub.start_at + relativedelta(months=1)
                if sub.end_at != correct_end:
                    old_end = sub.end_at
                    sub.end_at = correct_end
                    updated_count += 1
                    print(f"‚úÖ Monthly –ø–æ–¥–ø–∏—Å–∫–∞ ID {sub.id}: {old_end} ‚Üí {correct_end}")
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º stable –ø–æ–¥–ø–∏—Å–∫–∏ (+3 –º–µ—Å—è—Ü–∞)
            for sub in stable_subs:
                correct_end = sub.start_at + relativedelta(months=3)
                if sub.end_at != correct_end:
                    old_end = sub.end_at
                    sub.end_at = correct_end
                    updated_count += 1
                    print(f"‚úÖ Stable –ø–æ–¥–ø–∏—Å–∫–∞ ID {sub.id}: {old_end} ‚Üí {correct_end}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if updated_count > 0:
                await session.commit()
                print(f"\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {updated_count}")
            else:
                print("\n‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É–∂–µ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            print("\n=== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ü–û–î–ü–ò–°–ö–ò ===")
            result = await session.execute(
                select(Subscription)
                .order_by(Subscription.created_at.desc())
            )
            updated_subs = result.scalars().all()
            
            for sub in updated_subs:
                print(f"ID: {sub.id}, User: {sub.user_id}, Tariff: {sub.tariff_code}")
                print(f"  Start: {sub.start_at}")
                print(f"  End: {sub.end_at}")
                print(f"  Status: {sub.status}")
                print()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await session.rollback()
            raise

async def create_missing_subscriptions(session, payments_without_subs):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –∏—Ö –Ω–µ—Ç"""
    print(f"\nüî® –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è {len(payments_without_subs)} –ø–ª–∞—Ç–µ–∂–µ–π...")
    
    created_count = 0
    for payment in payments_without_subs:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ webhook
            subscription = await activate_or_extend_subscription(
                session=session,
                user_id=payment.user_id,
                tariff_code=payment.tariff_code
            )
            created_count += 1
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ ID {payment.id} (User: {payment.user_id}, Tariff: {payment.tariff_code})")
            print(f"   –ü–µ—Ä–∏–æ–¥: {subscription.start_at} ‚Üí {subscription.end_at}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ ID {payment.id}: {e}")
    
    if created_count > 0:
        await session.commit()
        print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {created_count}")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")

if __name__ == "__main__":
    print("üîß –°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫")
    print("=" * 50)
    
    asyncio.run(fix_subscriptions())